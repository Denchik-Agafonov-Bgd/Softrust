{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Person } from './models/person';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/subject.service\";\nimport * as i2 from \"./services/person.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/router\";\nexport class AppComponent {\n  constructor(subjectServices, personService, formBuilder) {\n    this.subjectServices = subjectServices;\n    this.personService = personService;\n    this.formBuilder = formBuilder;\n    this.person = new Person();\n    this.form = new FormGroup({\n      email: new FormControl('', [Validators.email, Validators.required]),\n      name: new FormControl(null, [Validators.required, Validators.minLength(2)]),\n      phone: new FormControl('', [Validators.required]),\n      message: new FormControl('', [Validators.required]),\n      subjectId: new FormControl('', [Validators.required]),\n      recaptcha: new FormControl('', [Validators.required])\n    });\n    this.title = 'SofTrust.UI';\n    this.subjects = [];\n    this.person1 = [];\n    this.siteKey = '6Ldkq-MkAAAAAG16wm76dnES4mCo-VQRe-eebM1Z';\n    this.isCaptcha = true;\n  }\n  ngOnInit() {\n    this.subjectServices.getSubjects().subscribe(result => this.subjects = result);\n  }\n  CreatePerson(person) {\n    this.personService.createPerson(person).subscribe(result => this.person1 = result);\n  }\n  handleSuccess() {\n    console.log(this.isCaptcha);\n    this.isCaptcha = false;\n    console.log(this.isCaptcha);\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.SubjectService), i0.ɵɵdirectiveInject(i2.PersonService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  inputs: {\n    person: \"person\"\n  },\n  decls: 1,\n  vars: 0,\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"router-outlet\");\n    }\n  },\n  dependencies: [i4.RouterOutlet],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAsBA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAChF,SAASC,MAAM,QAAQ,iBAAiB;;;;;;AAaxC,OAAM,MAAOC,YAAY;EAkCvBC,YACUC,eAA+B,EAC/BC,aAA4B,EAC5BC,WAAwB;IAFxB,oBAAe,GAAfF,eAAe;IACf,kBAAa,GAAbC,aAAa;IACb,gBAAW,GAAXC,WAAW;IApCZ,WAAM,GAAW,IAAIL,MAAM;IAEpC,SAAI,GAAc,IAAIF,SAAS,CAAC;MAC9BQ,KAAK,EAAE,IAAIT,WAAW,CAAC,EAAE,EAAE,CACzBE,UAAU,CAACO,KAAK,EAChBP,UAAU,CAACQ,QAAQ,CACpB,CAAC;MACFC,IAAI,EAAE,IAAIX,WAAW,CAAC,IAAI,EAAE,CAC1BE,UAAU,CAACQ,QAAQ,EACnBR,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,CACxB,CAAC;MACFC,KAAK,EAAE,IAAIb,WAAW,CAAC,EAAE,EAAE,CACzBE,UAAU,CAACQ,QAAQ,CACpB,CAAC;MACFI,OAAO,EAAE,IAAId,WAAW,CAAC,EAAE,EAAE,CAC3BE,UAAU,CAACQ,QAAQ,CACpB,CAAC;MACFK,SAAS,EAAE,IAAIf,WAAW,CAAC,EAAE,EAAE,CAC7BE,UAAU,CAACQ,QAAQ,CACpB,CAAC;MACFM,SAAS,EAAE,IAAIhB,WAAW,CAAC,EAAE,EAAE,CAC7BE,UAAU,CAACQ,QAAQ,CACpB;KAEF,CAAC;IACF,UAAK,GAAG,aAAa;IAErB,aAAQ,GAAc,EAAE;IACxB,YAAO,GAAa,EAAE;IAEtB,YAAO,GAAG,0CAA0C;IACpD,cAAS,GAAY,IAAI;EAMpB;EAELO,QAAQ;IACN,IAAI,CAACX,eAAe,CACnBY,WAAW,EAAE,CACbC,SAAS,CAAEC,MAAiB,IAAM,IAAI,CAACC,QAAQ,GAAGD,MAAO,CAAC;EAC7D;EAEAE,YAAY,CAACC,MAAc;IACzB,IAAI,CAAChB,aAAa,CACjBiB,YAAY,CAACD,MAAM,CAAC,CACpBJ,SAAS,CAAEC,MAAgB,IAAM,IAAI,CAACK,OAAO,GAAGL,MAAO,CAAC;EAC3D;EAEAM,aAAa;IACXC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,SAAS,CAAC;IAC3B,IAAI,CAACA,SAAS,GAAG,KAAK;IACtBF,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,SAAS,CAAC;EAC7B;;AAxDWzB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAA0B;EAAAC;IAAAR;EAAA;EAAAS;EAAAC;EAAAC;IAAA;MCfzBC,gCAA+B","names":["FormControl","FormGroup","Validators","Person","AppComponent","constructor","subjectServices","personService","formBuilder","email","required","name","minLength","phone","message","subjectId","recaptcha","ngOnInit","getSubjects","subscribe","result","subjects","CreatePerson","person","createPerson","person1","handleSuccess","console","log","isCaptcha","selectors","inputs","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\User\\ProjectAngular\\SofTrust.UI\\src\\app\\app.component.ts","C:\\Users\\User\\ProjectAngular\\SofTrust.UI\\src\\app\\app.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Person } from './models/person';\nimport { Subject } from './models/subject';\nimport { PersonService } from './services/person.service';\nimport { SubjectService } from './services/subject.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\n\n\nexport class AppComponent {\n  @Input() person: Person = new Person;\n\n  form: FormGroup = new FormGroup({\n    email: new FormControl('', [\n      Validators.email,\n      Validators.required\n    ]),\n    name: new FormControl(null, [\n      Validators.required,\n      Validators.minLength(2)\n    ]),\n    phone: new FormControl('', [\n      Validators.required\n    ]),\n    message: new FormControl('', [\n      Validators.required\n    ]),\n    subjectId: new FormControl('', [\n      Validators.required\n    ]),\n    recaptcha: new FormControl('', [\n      Validators.required\n    ]),\n\n  });\n  title = 'SofTrust.UI';\n\n  subjects: Subject[] = []\n  person1: Person[] = []\n\n  siteKey = '6Ldkq-MkAAAAAG16wm76dnES4mCo-VQRe-eebM1Z'\n  isCaptcha: boolean = true;\n\n  constructor(\n    private subjectServices: SubjectService,\n    private personService: PersonService,\n    private formBuilder: FormBuilder\n    ) {}\n\n  ngOnInit(): void {\n    this.subjectServices\n    .getSubjects()\n    .subscribe((result: Subject[]) => (this.subjects = result));\n  }\n\n  CreatePerson(person: Person) {\n    this.personService\n    .createPerson(person)\n    .subscribe((result: Person[]) => (this.person1 = result));\n  }\n\n  handleSuccess(){\n    console.log(this.isCaptcha);\n    this.isCaptcha = false;\n    console.log(this.isCaptcha);\n  }\n}\n","<router-outlet></router-outlet>\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}